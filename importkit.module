<?php

function importkit_initialize($op = '')
{
    static $load;

    if(isset($load)) return true;

    // Инициализируем толькл 1 раз
    $load = true;

    spl_autoload_register('importkit_autoload', true);

    // Получаем список слушателей
    $listners = importkit_info();

    // Запускаем обработчик
    $importkit = ImportkitObservable::getInstance(count($listners));

    // Установка пути
    $path = variable_get('importkit_data_path', '');
    if (!is_dir($path)) {
        $path = drupal_get_path('module', 'importkit') . '/data';
    }

    variable_set('importkit_data_path', $path);

    // Устанавливаем права на папку
    @chmod($path, 0775);

    foreach (glob($path . '/' . variable_get('importkit_filename_wildcards_import', 'import*.xml')) as $file) {
        $importkit->setImport($file);
    }

    foreach (glob($path . '/' . variable_get('importkit_filename_wildcards_offers', 'offers*.xml')) as $file) {
        $importkit->setImport($file);
    }

    // Получаем список обрабатываемых функций для каждого слушателя
    $call_backs = module_invoke_all('importkit_call_backs');

    // Регистрируем слушателей
    foreach (array_keys($listners) as $listner) {
        $listner = new $listner($call_backs);
        $listner->weight = variable_get('imporkit_settings_' . get_class($listner), $listner->weight);
        $listner->operation = $op;
        $importkit->attach($listner);
    }

    register_shutdown_function('importkit_shutdown', $importkit);

}

function importkit_info()
{
    static $classes;
    if (!isset($classes)) {
        $classes = module_invoke_all('importkit_info');
    }

    return $classes;
}

function importkit_importkit_info()
{
    $path = drupal_get_path('module', 'importkit') . '/includes';

    return array(
        // Основные настройки модуля
        'ImportkitListnerCommon' => $path . '/listners/ImportkitListnerCommon',
        // Класс очищающий все временные объекты
        'ImportkitListnerClean' => $path . '/listners/ImportkitListnerClean',
    );
}

function importkit_shutdown($importkit)
{
    $_errors = array();
    $errors = $importkit->getErrors();
    foreach ($errors as $className => $class_errors) {

        foreach ($class_errors as $error) {
            watchdog('importkit', "%error (Listner: %class)", array(
              '%class' => $className,
              '%error' => $error,
            ), WATCHDOG_ERROR);
        }

        $_errors = $class_errors;

        // Получаем ранее полученные ошибки
        if ($cache = cache_get('importkit_errors_' . $className)) {
            $_errors = array_merge($_errors, $cache->data);
        }

        // Сохраняем последнюю ошибку класса
        cache_set('importkit_errors_' . $className, $_errors);
    }
}

function importkit_autoload($class)
{
    $path = drupal_get_path('module', 'importkit') . '/includes';

    $classes = importkit_info();

    // Регистрируем основные классы модуля
    $classes = array_merge($classes, array(

        // Интерфейсы
        'InterfaceObserver' => $path . '/interfaces/InterfaceObserver',
        'InterfaceReader' => $path . '/interfaces/InterfaceReader',
        'InterfaceSubject' => $path . '/interfaces/InterfaceSubject',
        // Классы для парсинга XML
        'ImportkitXMLReader' => $path . '/parsers/ImportkitXMLReader',
        'ImportkitParserCML' => $path . '/parsers/ImportkitParserCML',
        // Классы для парсинга CSV

        // Классы для парсинга текстового файла

        // Классы для парсинга DBF

    ));

    if (isset($classes[$class])) {
        $path = $classes[$class];
    } else {
        $path .= '/' . $class;
    }

    if (file_exists($path . '.php')) {
        require_once $path . '.php';
    }
}

function importkit_menu()
{

    $items['admin/importkit'] = array(
       'title' => t('Importkit (1C)'),
       'description' => t('Exchange service for 1c.'),
       'access callback' => 'user_access',
       'access arguments' => array('administer importkit'),
       'page callback' => 'importkit_page',
       'weight' => 1,
    );

    $items['admin/importkit/import'] = array(
       'title' => t('Import & Update'),
       'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    $items['admin/importkit/remove'] = array(
      'title' => t('Remove'),
      'description' => 'Run the batch remove processing.',
      'access arguments' => array('administer importkit'),
      'page callback' => 'importkit_remove_page',
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
    );

    $items['admin/importkit/settings'] = array(
        'title' => t('importkit settings'),
        'description' => t('importkit settings'),
        'access callback' => 'user_access',
        'access arguments' => array('administer importkit'),
        'page callback' => 'importkit_settings',
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
    );

    return $items;
}

function importkit_run()
{
    importkit_product_batch_set();

    // Используется для запуска из консоли (drush, cron)
    if (!cache_get('importkit_progressive')) {
        drupal_goto('admin/importkit');
    }

    return true;
}

function importkit_product_batch_set()
{
    $t = get_t();

    $jobs = importkit_get_jobs();

    if ($jobs) {

        // Используется для зацикливания batch процесса
        $batch = &batch_get();

        $batch = array(
          'operations' => $jobs,
          'title' => $t('Importkit processing ...'),
          'init_message' => $t('Starting processing'),
          'error_message' => $t('Error during process'),
          'finished' => 'importkit_batch_finished',
        );

        batch_set($batch);

        // Используется для запуска из консоли (drush, cron)
        if (cache_get('importkit_progressive')) {
            $batch = &batch_get();
            $batch['progressive'] = false;
        }

        batch_process();

        cache_set('importkit_working', time());

        rules_invoke_event('importkit_import_started', $jobs);

        return true;

    } else {
        drupal_set_message($t('No tasks to continue.'), 'status');
    }
}

function importkit_batch($options, &$context)
{
    if(empty($options['operation']))
    {
        $options['operation'] = 'update';
    }

    // Передаем параметры в finished
    $context['results']['operation'] = $options['operation'];

    if (!isset($options['max'])) {
        return;
    }

    importkit_initialize($options['operation']);

    $chunks = 1;

    if (isset($options['chunks'])) {
        $chunks = $options['chunks'];
    }

    $context['sandbox']['max'] = $options['max'];

    if(!isset($context['results']['progress']))
    {
        $context['results']['progress'] = 0;
    }

    $context['results']['progress']++;

    // Устанавливаем флаг удачного завершения,
    // для принудительной очистки очереди задач
    $context['finished'] = 1;

    // Передаем по ссылке контекст в листнер
    $options['params']['context'] = &$context;

    // Информируем пользователя о совершаемых действиях
    $arg = '';
    if (isset($options['params']['argument'])) {
        switch (gettype($options['params']['argument'])) {
            case 'object':
                $arg = 'Object()';
                break;

            case 'array':
                $array = reset($options['params']['argument']);
                if (is_array($array)) {
                    $arg = 'Array(' . count($array) . ')';
                } else {
                    $arg = gettype($array);
                }
                break;

            default:
                $arg = '"' . $options['params']['argument'] . '"';
                break;
        }
    }

    $start = microtime(true);

    // Используется для запуска из консоли (drush, cron)
    if (cache_get('importkit_progressive')) {
        if($context['results']['progress'] == 1) {
            importkit_verbose( "Start method {$options['method']} from listner {$options['class']} \n" );
        }
    } else {

        $context['message'] .= t("Start method %method from listner %class with arguments (%arg)<br>\n", array(
                    '%method' => $options['method'],
                    '%class' => $options['class'],
                    '%arg' => $arg,
                ));

    }

    if ($chunks > 1) {
        $arguments = $options['params']['argument'];
        foreach ($arguments as $argument) {
            $options['params']['argument'] = $argument;
            ImportkitObservable::getInstance()->run($options);
        }
    } else {
        ImportkitObservable::getInstance()->run($options);
    }

    $context['results'][$options['class']] = array(
      'class' => $options['class'],
      'method' => $options['method'],
      'operations' => array(),
    );

    // Используется для запуска из консоли (drush, cron)
    if (cache_get('importkit_progressive')) {

        $progress = $context['results']['progress'] * $chunks;
        $finished = $progress / $context['sandbox']['max'];

        if ($finished >= 1) {
            $context['results']['progress'] = 0;
            importkit_verbose( "\n" . t('Finished') . "\n" );
        } else {
            importkit_print_progress($progress/$context['sandbox']['max']);
        }

    }

    $context['message'] .= t('Time passed: @time sek.<br>', array('@time' => round(microtime(true) - $start, 2)));
    $context['message'] .= t('Memory used: @memory Mb.<br>', array('@memory' => round(memory_get_peak_usage() / 1024 / 1024, 2)));
}

function importkit_batch_finished($success, $results, $operations)
{

    importkit_initialize($results['operation']);

    $jobs = array();

    foreach ($results as $result) {
        if (!isset($result['class'])) {
            continue;
        }

        $options = array(
          'class' => $result['class'],
          'method' => 'finished',
          'params' => array(
            'success' => $success,
            'results' => $result,
            'operations' => $operations
          ),
          'errors' => array(),
        );

        ImportkitObservable::getInstance()->run($options);
    }

    // Проверяем наличие добавленных заданий
    if (ImportkitObservable::getInstance()->getJobs()) {
        // Запускаем обработчик
        importkit_run();
    } else {
        rules_invoke_event('importkit_import_finished', $results);
        // Инициализируем хук, выполняющий нужные действия по окончинии импорта.
        // hook_importkit_import_finished()
        module_invoke_all('importkit_import_finished');

        // Переводим в рабочий режим
        variable_set('maintenance_mode', 0);

        // Используется для запуска из консоли (drush, cron)
        if (!cache_get('importkit_progressive')) {
            // Завершаем обработку
            drupal_goto('admin/importkit');
        } else {
            return true;
        }
    }


}

function importkit_get_jobs()
{
    $operations = array();

    foreach (ImportkitObservable::getInstance() as $listner) {
        $methods = $listner->getJobs();
        if ($methods && count($methods)) {

            $params = $listner->getParams();
            $params['class'] = get_class($listner);
            $params['params'] = array();
            $params['operation'] = $listner->operation;

            // Ставим задачи на обработку
            foreach ($methods as $method => $arguments) {

                // Преводим аргументы к единному стилю
                $_arguments = array();
                if (!is_array($arguments)) {
                    $_arguments[] = $arguments;
                } else {
                    $_arguments = $arguments;
                }

                $params['method'] = $method;
                $params['max'] = 1;

                if ($_arguments && count($_arguments)) {
                    $params['max'] = count($_arguments);
                    // Разбиваем массив задач на заданные части
                    // и формируем из них задания
                    if (isset($params['chunks']) && $params['chunks'] > 1) {
                        $_arguments = array_chunk($_arguments, $params['chunks']);
                    }
                    foreach ($_arguments as $argument) {
                        // Устанавливаем переменную для единичных параметров
                        $params['params'] = array('argument' => $argument);
                        // Устанавливаем обработчик
                        $operations[] = array('importkit_batch', array($params));
                    }
                } else {
                    $params['chunks'] = 1;
                    // Устанавливаем обработчик
                    $operations[] = array('importkit_batch', array($params));
                }
            }
        }
    }

    return $operations;
}

function importkit_page()
{
    variable_set('imporkit_settings_ImportkitListnerCategory', 1);
    variable_set('imporkit_settings_ImportkitListnerContent', 2);
    variable_set('imporkit_settings_ImportkitListnerOffers', 3);
    variable_set('imporkit_settings_ImportkitListnerPrice', 4);
    variable_set('imporkit_settings_ImportkitListnerStock', 5);

    importkit_initialize('import');

    return drupal_get_form('importkit_form');
}

function importkit_remove_page()
{

    variable_set('imporkit_settings_ImportkitListnerCategory', 1);
    variable_set('imporkit_settings_ImportkitListnerPrice', 2);
    variable_set('imporkit_settings_ImportkitListnerStock', 3);
    variable_set('imporkit_settings_ImportkitListnerOffers', 4);
    variable_set('imporkit_settings_ImportkitListnerContent', 5);

    importkit_initialize('remove');

    return drupal_get_form('importkit_form');
}

function importkit_form($form, $form_state)
{
    $submit = false;
    if (isset($form_state['post'])) {
        $submit = true;
    }

    $form = array();
    foreach (ImportkitObservable::getInstance() as $listner) {
        if (isset($form_state['input'])) {
            $listner->setVariables($form_state['input']);
        }
        $_form = $listner->form($form_state, $submit);

        if ($_form) {
            $errors = ImportkitObservable::getInstance()->getErrorsByListner($listner);
            if ($errors) {
                $_form[]['errors'] = array(
                  '#type' => 'item',
                  '#markup' => is_array($errors) ? implode('<br>', $errors) : $errors,
                  '#prefix' => '<div class="messages error">',
                  '#suffix' => '</div>',
                  '#weight' => 100,
                );
            }

            $form[] = $_form;
        }
    }

    $form['actions']['#type'] = 'actions';

    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#submit' => array('importkit_form_submit'),
    );

    return $form;
}

function importkit_form_submit($form, &$form_state, $console = false)
{
    if (variable_get('importkit_switch_maintenance_mode', true)) {
        // Переводим работу сайта в "Режим обслуживания"
        variable_set('maintenance_mode', 1);
    }

    if (in_array('importkit_form_submit', $form_state['submit_handlers'])) {
        // Очистка кешей
        cache_clear_all('importkit_progressive', 'cache');
        cache_clear_all('importkit_results', 'cache');
        importkit_clear_cache();
        foreach (ImportkitObservable::getInstance() as $listner) {
            cache_clear_all('importkit_errors_' . get_class($listner), 'cache');
        }
    }

    // Информирование форм о сабмите
    foreach (ImportkitObservable::getInstance() as $listner) {
        $listner->form_submit($form, $form_state);
    }

    if (!$console) {
        importkit_run();
    }
}

function importkit_save_form($form, &$form_state)
{
    importkit_form_submit($form, $form_state, true);
    system_settings_form_submit($form, $form_state);
    variable_set('imporkit_settings', $form_state['values']);
}

function importkit_settings()
{
    variable_set('imporkit_settings_ImportkitListnerCategory', 1);
    variable_set('imporkit_settings_ImportkitListnerContent', 2);
    variable_set('imporkit_settings_ImportkitListnerOffers', 3);
    variable_set('imporkit_settings_ImportkitListnerPrice', 4);
    variable_set('imporkit_settings_ImportkitListnerStock', 5);

    importkit_initialize('settings');

    return drupal_get_form('importkit_settings_form');
}

function importkit_settings_form($form, $form_state)
{
    $submit = false;
    if (isset($form_state['post'])) {
        $submit = true;
    }

    $form = array();
    foreach (ImportkitObservable::getInstance() as $listner) {
        if (isset($form_state['input'])) {
            $listner->setVariables($form_state['input']);
        }
        $form[] = $listner->settings_form($form_state, $submit);
    }

    if (!$form) {
        // Не подключены модули обработчики
    }

    $form = system_settings_form($form);

    $form['#submit'][] = 'importkit_settings_form_submit';

    return $form;
}

function importkit_settings_form_submit($form, &$form_state)
{
    foreach (ImportkitObservable::getInstance() as $listner) {
        $listner->settings_form_submit($form, $form_state);
    }
}

function importkit_tutf($content)
{
    if ($content) {
        html_entity_decode((string) $content, ENT_QUOTES, "UTF-8");
    }

    return (string) trim($content);
}

function importkit_field_reset(&$field, $key, $value)
{
    if (is_array($field)) {
        foreach ($field as $item_key => $item_value) {
            if (isset($field[$item_key]) && $field[$item_key][$key] == $value) {
                unset($field[$item_key]);
                break;
            }
        }
    }
}

function importkit_field_data_exists(&$field, $match)
{
    if (is_array($field)) {
        return in_array($match, $field);
    }
}

function importkit_get_field(
  $entity,
  $field_name,
  $default = '',
  $extra = "value"
) {
    if (isset($entity->{$field_name}[LANGUAGE_NONE][0][$extra])) {
        return $entity->{$field_name}[LANGUAGE_NONE][0][$extra];
    } else {
        return $default;
    }
}

function importkit_convert(
  $from = "UTF-8",
  $into = "WINDOWS-1251",
  $content
) {
    if (strtoupper($from) == strtoupper($into)) {
        return $content;
    }
    if (function_exists("iconv")) {
        $content = iconv($from, $into, $content);
    } elseif (function_exists("libiconv")) {
        $content = libiconv($from, $into, $content);
    } elseif (function_exists("mb_convert_encoding")) {
        $content = mb_convert_encoding($content, $into, $from);
    }

    return $content;
}

function importkit_rules_event_info()
{
    $events = array();

    $events['importkit_import_started'] = array(
      'label' => t('Importkit has been started'),
      'group' => t('Import'),
      'variables' => array(),
      'access callback' => 'importkit_rules_access',
    );

    $events['importkit_import_finished'] = array(
      'label' => t('Importkit has been finished'),
      'group' => t('Import'),
      'variables' => array(
        'results' => array()
      ),
      'access callback' => 'importkit_rules_access',
    );

    return $events;
}

function importkit_rules_access()
{
    // @todo
    return true;
}

function importkit_cron()
{
    //importkit_product_batch_set(true);
}

function importkit_clear_cache()
{
    if ($keys = cache_get('cml_store_category_category')) {
        importkit_cache_key_clear($keys, 'cache');
    }
    cache_clear_all('cml_store_category_category', 'cache');

    if ($keys = cache_get('cml_store_content_products')) {
        importkit_cache_key_clear($keys, 'cache');
    }
    cache_clear_all('cml_store_content_products', 'cache');

    if ($keys = cache_get('cml_store_content_offers')) {
        importkit_cache_key_clear($keys, 'cache');
    }

    cache_clear_all('cml_store_content_offers', 'cache');
    cache_clear_all('importkit_working', 'cache');

}

function importkit_cache_key_clear($keys)
{
    foreach ($keys as $key) {
        cache_clear_all($key, 'cache');
    }
}

/**
 * Provides progress bar.
 */
function importkit_print_progress($ratio)
{
    $percentage = floor($ratio * 100) . '%';
    $columns = drush_get_context('DRUSH_COLUMNS', 80);
    // Subtract 8 characters for the percentage, brackets, spaces and arrow.
    $progress_columns = $columns - 8;
    // If ratio is 1 (complete), the > becomes a = to make a full bar.
    $arrow = ($ratio < 1) ? '>' : '=';
    // Print a new line if ratio is 1 (complete). Otherwise, use a CR.
    $line_ending = ($ratio < 1) ? "\r" : "\n";

    // Determine the current length of the progress string.
    $current_length = floor($ratio * $progress_columns);
    $progress_string = str_pad('', $current_length, '=');

    $output = '[';
    $output .= $progress_string . $arrow;
    $output .= str_pad('', $progress_columns - $current_length);
    $output .= ']';
    $output .= str_pad('', 5 - strlen($percentage)) . $percentage;
    $output .= $line_ending;

    importkit_verbose( $output );

    flush();
}

function importkit_verbose($message)
{
    if(!cache_get('importkit_silent')) {
        echo $message;
    }
}

/*
 * Implements hook_permission()
 */
function importkit_permission() {
  return array(
    'administer importkit' => array(
      'title' => t('Administer importkit'),
      'description' => t('Access for an users with an appropriate perms to administer the importkit module'),
    ),
  );
}


