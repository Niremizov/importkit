<?php

// Строка - обозначение регионов.
define('GF_STOCK_REGION_ALL', 'all');
define('GF_STOCK_REGION_RU', 'ru');
define('GF_STOCK_REGION_CN', 'cn');


/**
 * Implements hook_importkit_price().
 */
function gf_stock_importkit_price($entity, $xml_element){
  // Обновление/импорт данных о ценах по регионам.
  $prices = $xml_element->Цены->Цена;
  foreach ($prices as $price) {
    db_merge('gf_stock_prices')
      ->key(array(
        'nid' => $entity->nid,
        'price_id' => $price->ИдТипаЦены)
      )->fields(array(
        'price' => $price->ЦенаЗаЕдиницу,
        'currency' => $price->Валюта,
      ))
      ->execute();
  }
}


/**
 * Implements hook_node_delete().
 */
function gf_stock_node_delete($node) {
  // При удалении ноды удаляем запись с оной из таблицы
  // с ценами регионов.
  db_delete('gf_stock_prices')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_importkit_stock().
 */
function gf_stock_importkit_stock($entity, $xml_element){
  // Обновляем при импорте данные по остаткам в регионах.
  foreach($xml_element->Остатки->ОстаткиСклада as $element) {
    db_merge('importkit_cml_stock')->key(array(
      'guid1' => $entity->guid1,
      'guid2' => $entity->guid2,
      'nid' => $entity->nid,
      'warehouse' => (string) $element->ИдСклада,
    ))->fields(array(
      'stock' => (string) $element->Остаток,
      'warehouse' => (string) $element->ИдСклада,
      'region' => (string) $element->Регион,
    ))->execute();

  }
}


/**
 * Implements hook_node_load().
 */
function gf_stock_node_load($nodes, $types){
  $result = db_query('SELECT nid, stock, region
    FROM {importkit_cml_stock}
    WHERE nid IN(:nids)', array(':nids' => array_keys($nodes),));

  // Добавляем при загрузке нод-товаров поля с данными
  // по остаткам в регионах.
  foreach ($result as $record) {
    if (!$record->region) continue;
    $stock = (int) $record->stock;
    // Складываем суммы остатков в конкретном регионе для разных представлений.
    if (isset($nodes[$record->nid]->gf_region_stock[$record->region])) {
      $nodes[$record->nid]->gf_region_stock[$record->region] += $stock;
    }
    else{
      $nodes[$record->nid]->gf_region_stock[$record->region] = $stock;
    }
  }
}


/**
 * Implements hook_menu().
 */
function gf_stock_menu() {
  $items['gf_stock/region_switch'] = array(
    'title' => 'Stock Region Switcher',
    'page callback' => 'gf_stock_region_switch',
    'page arguments' => array(2),
    'access arguments' => array(
      'access content',
    ),
    'type' => MENU_CALLBACK,
  );
  $items['admin/importkit/gf_stock'] = array(
    'title' => t('GF Stock'),
    'description' => 'GF Stock module settings',
    'access arguments' => array('administer importkit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['gf_stock_settings'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  return $items;
}


/**
 * Массив со списком доступных регионов.
 */
function gf_stock_get_regions() {
  return [
    GF_STOCK_REGION_CN => GF_STOCK_REGION_CN,
    GF_STOCK_REGION_RU => GF_STOCK_REGION_RU
  ];

}


/**
 * Переключение региона пользователя.
 */
function gf_stock_region_switch($region=''){
  if ($region) {
    $regions = gf_stock_get_regions();
    if (!in_array($region, $regions)) return;
    else {
      // Метку о выбранном регионе кладем пользователю в сессию.
      $_SESSION['gf_stock_region'] = $regions[$region];
    }
  }
  // Если регион не получе - обнуляем параметр в сессии.
  elseif (isset($_SESSION['gf_stock_region'])) {
    unset($_SESSION['gf_stock_region']);
  }
  drupal_goto();
}


/**
 * Implements hook_block_info().
 *
 */
function gf_stock_block_info() {
  $blocks['gf_stock_region_switch'] = array(
    'info' => t('GF Stock: user region switcher'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 */
function gf_stock_block_view($delta = '') {
  switch ($delta) {
  case 'gf_stock_region_switch':
    $block['subject'] = t('Select warehouse region');
    $block['content'] = gf_stock_block_contents($delta);
    break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function gf_stock_block_contents($block) {
  switch ($block) {
  case 'gf_stock_region_switch':
    $regions = [];

    $region_switch_path = 'gf_stock/region_switch';
    $link_options = [
      'query' => drupal_get_destination(),
      'html' => true,
    ];

    $regions[GF_STOCK_REGION_ALL] = l(t('All'), $region_switch_path, $link_options);

    foreach(array_keys(gf_stock_get_regions()) as $region) {
      $regions[$region] = l($region, $region_switch_path . '/' . $region, $link_options);
    }
    return theme('gf_stock_block_region_switcher', [
      'regions' => $regions,
      'current_region' => gf_stock_get_current_region()
    ]);
  }
}


function gf_stock_get_current_region() {
  $default_region = variable_get('gf_stock_default_region', GF_STOCK_REGION_ALL);
  return isset($_SESSION['gf_stock_region']) ? $_SESSION['gf_stock_region'] : $default_region;
}


/**
 * Implements hook_theme().
 */
function gf_stock_theme($existing, $type, $theme, $path) {
  return [
    'gf_stock_block_region_switcher' => [
      'variables' => [
        'regions' => [],
        'current_region' => NULL,
      ],
      'path' => drupal_get_path('module', 'gf_stock') . '/theme',
      'template' => 'gf_stock_block_region_switcher',
    ],
  ];

}


/**
 * Форма наcтроек модуля.
 */
function gf_stock_settings() {
  $rate_array = array(variable_get('gf_stock_yuan_exchange_rate', NULL), 
  variable_get('gf_stock_yuan_rate_last_update', NULL));
  if(in_array(NULL, $rate_array)) {
    gf_stock_update_yuan_exchange_rate(); 
  }

  $form['gf_stock_current_yuan_exchange_rate'] = array(
    '#markup' => t('The current exchange rate of the yuan to the 
    ruble is @rate rubles per 1 yuan. Date of last update: @date',
array(
  '@rate' => variable_get('gf_stock_yuan_exchange_rate'),
  '@date' => variable_get('gf_stock_yuan_rate_last_update')
)),
  );
$form['gf_stock_region_prices'] = array(
  '#type' => 'fieldset',
  '#title' => t('Prices by region'),
);
$options = [];
$options[GF_STOCK_REGION_ALL] = t('All');

// Получаем список ID для цен регионов.
$query_region_ids = db_select('gf_stock_prices', 'p')
  ->fields('p', array('price_id', 'currency'))
  ->distinct('p.price_id' )
  ->execute()
  ->fetchAll();
foreach($query_region_ids as $name=>$region_id) {
  $region_ids[$region_id->price_id] = '(' . $region_id->currency . ') ' . $region_id->price_id;
}

foreach(gf_stock_get_regions() as $name => $region){
  $options[$name] = $region;
  $form['gf_stock_region_prices']['gf_stock_region_price_'. $name] = array(
    '#type' => 'select',
    '#title' => t('Price ID for Region @region', array('@region' => drupal_strtoupper($name))),
    '#description' => t('The stock region that will be selected if the user did`t select their region.'),
    '#options' => $region_ids,
    '#default_value' => variable_get('gf_stock_region_price_' . $name),
  );
}

$form['gf_stock_default_region'] = array(
  '#type' => 'select',
  '#title' => t('Default Region'),
  '#description' => t('The stock region that will be selected if the user did`t select their region.'),
  '#options' => $options,
  '#default_value' => variable_get('gf_stock_default_region', GF_STOCK_REGION_ALL),
  '#weight' => -1,
);
return system_settings_form($form);
}


/**
 * Implements hook_views_api().
 */
function gf_stock_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'gf_stock') . '/views',
  );
}

function gf_stock_get_region_price($nid, $region=NULL) {

  if (is_null($region) && isset($_SESSION['gf_stock_region'])) {
    $region = $_SESSION['gf_stock_region'];
  }

  $region_id = variable_get('gf_stock_region_price_' . $region);
  if ($region_id){
    return db_select('gf_stock_prices', 'p')
      ->fields('p', array('price'))
      ->condition('p.nid', $nid)
      ->condition('p.price_id', $region_id)
      ->execute()
      ->fetchField();
  }
}

function gf_stock_uc_product_alter(&$node) {
  if($price = gf_stock_get_region_price($node->nid)) {
    $node->price = $price;
  }
}


function gf_stock_get_yuan_exchange_rate() {
  $url_json = 'https://www.cbr-xml-daily.ru/daily_json.js';
  try {
    $data = json_decode(file_get_contents($url_json)); 
    $rate = ($data->Valute->CNY->Value / 10);
    $date = $data->Date;
  } catch(Exception $e) {
    watchdog('gf_stock', $e->getMessage(), array(), WATCHDOG_ERROR);
    return;
  }
  return array(
    'rate' => $rate, 
    'date' => $date
  );
}

function gf_stock_update_yuan_exchange_rate() {
  if($data = gf_stock_get_yuan_exchange_rate()){
    variable_set('gf_stock_yuan_exchange_rate', $data['rate'] );
    variable_set('gf_stock_yuan_rate_last_update', $data['date'] );
  }
}
